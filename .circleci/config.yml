target_steps: &target_steps
  docker:
    - image: cimg/rust:1.51.0
  steps:
    - checkout
    - restore_cache:
        key: v3-ssd1327-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
    - run: rustup self update
    - run: rustup default ${RUST_VERSION:-stable}
    - run: rustup component add rustfmt
    - run: cargo update
    - run: |
        SYSROOT=$(rustc --print sysroot)

        if [[ ! "$SYSROOT" =~ "$TARGET" ]]; then
          rustup target add $TARGET
        else
          echo "Target $TARGET is already installed"
        fi
    - run: ./build.sh
    - save_cache:
        key: v3-ssd1327-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
        paths:
          - ./target
          - /home/circleci/.cargo/registry

version: 2
jobs:
  target-arm-unknown-linux-eabi:
    environment:
      - TARGET: "arm-unknown-linux-gnueabi"
      - DISABLE_EXAMPLES: 1
    <<: *target_steps

  target-armv7-unknown-linux-gnueabihf:
    environment:
      - TARGET: "armv7-unknown-linux-gnueabihf"
      - DISABLE_EXAMPLES: 1
    <<: *target_steps

  xtensa-esp32-espidf:
    environment:
      - TARGET: "xtensa-esp32-espidf"
    <<: *target_steps

build_jobs: &build_jobs
  jobs:
    # Raspberry Pi 1
    - target-arm-unknown-linux-eabi

    # Raspberry Pi 2, 3, etc
    - target-armv7-unknown-linux-gnueabihf

    # ESP32
    - xtensa-esp32-espidf

workflows:
  version: 2
  build_all:
    <<: *build_jobs

